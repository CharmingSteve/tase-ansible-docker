---
- name: Deploy Web Application with Redis Counter
  hosts: raspberrypi1
  become: true
  vars:
    app_dir: /opt/hello-counter
  
  tasks:
    # Create application directory
    - name: Ensure application directory exists
      file:
        path: "{{ app_dir }}"
        state: directory
        mode: '0755'
    
    # Copy application files
    - name: Create a tarball of the application
      delegate_to: localhost
      become: false
      command: tar -czf /tmp/app_deploy.tar.gz --exclude='.git' .
      args:
        chdir: "{{ playbook_dir }}"
      changed_when: true
    
    - name: Copy tarball to remote host
      copy:
        src: /tmp/app_deploy.tar.gz
        dest: /tmp/app_deploy.tar.gz
    
    - name: Extract tarball to application directory
      unarchive:
        src: /tmp/app_deploy.tar.gz
        dest: "{{ app_dir }}"
        remote_src: yes
    
    - name: Clean up local tarball
      delegate_to: localhost
      become: false
      file:
        path: /tmp/app_deploy.tar.gz
        state: absent
      changed_when: false
    
    - name: Clean up remote tarball
      file:
        path: /tmp/app_deploy.tar.gz
        state: absent
      changed_when: false
    
    # Force rebuild by stopping and removing existing containers
    - name: Stop existing containers
      command: docker compose -f {{ app_dir }}/docker-compose.yml down
      args:
        chdir: "{{ app_dir }}"
      ignore_errors: yes
    
    # Remove existing images to force rebuild
    - name: Remove web image
      command: docker rmi hello-counter-web --force
      ignore_errors: yes
    
    # Deploy application using docker-compose v2
    - name: Deploy with docker-compose v2
      community.docker.docker_compose_v2:
        project_src: "{{ app_dir }}"
        state: present
        build: always  # Force build
    
    # Verify containers are running correctly
    - name: Wait for containers to start
      pause:
        seconds: 10
    
    - name: Check container status
      command: docker ps -a --format '{% raw %}{{.Names}} {{.Status}}{% endraw %}'
      register: container_status
    
    - name: Fail if containers are restarting or exited
      fail:
        msg: "Containers are not running properly. Status: {{ container_status.stdout }}"
      when: "'Restarting' in container_status.stdout or 'Exited' in container_status.stdout"
    
    - name: Show container logs if issues detected
      command: docker logs hello-counter-web-1
      register: container_logs
      when: "'Restarting' in container_status.stdout or 'Exited' in container_status.stdout"
    
    - name: Display container logs
      debug:
        var: container_logs.stdout_lines
      when: container_logs is defined and container_logs.stdout_lines is defined
    - name: Wait for web application to be accessible on port 8080
      uri:
        url: "http://localhost:8080"
        return_content: yes
      register: web_response
      retries: 5
      delay: 10
      until: web_response.status == 200
      ignore_errors: no
      
    - name: Fail if web application is not responding
      fail:
        msg: "Web application is not accessible on port 8080"
      when: web_response.status is not defined or web_response.status != 200
      
    - name: Verify content of web application response
      fail:
        msg: "Web application response does not contain expected content"
      when: "'Hello World' not in web_response.content"



